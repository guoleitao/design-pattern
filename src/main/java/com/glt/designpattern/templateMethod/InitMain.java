package com.glt.designpattern.templateMethod;

public class InitMain {
    public static void main(String[] args) {
        /**
         *  定义
         *      在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中，
         *      模板方法使得子类能够在不改变算法结构的情况下，重新定义算法中的某些步骤。
         *
         *  优点
         *      1.公共代码只存在于一个地方，方便维护。
         *      2.模板方法提供了一个框架，新加入的子类只需要实现自己的方法即可。
         *      3.行为由父类控制，具体实现则有子类提供。
         *
         *
         *  缺点
         *      1.如果算法步骤需要修改（添加或删除步骤），则需要修改所有的子类。
         *      2.类的组织方式没有弹性，如果新加入一个子类，则需要做许多工作。
         *      3.每一个不同实现都需要一个子类，导致类过多系统更加庞大。
         *
         *  好莱坞原则
         *      别调用我们，我们会调用你。
         *      此原则之下，我们允许底层组件将自己挂钩到系统上，但是高层组件会决定时候以及用什么方式来调用这些低层组件。
         *  好莱坞原则与依赖倒置原则区别
         *      依赖倒置原则：让我们尽量避免使用具体类，多使用抽象。
         *      好莱坞原则：是用在创建框架或者组件上的一种技巧，能够让低层组件挂钩到系统中，又不会让高层组件依赖低层组件。
         *      两者的目标都是为了解耦，但是依赖倒置原则更加注重在设计中避免依赖。
         *
         */

        GameClass game = new GameClass();
        game.execute();

        AppClass app = new AppClass();
        app.execute();
    }
}
