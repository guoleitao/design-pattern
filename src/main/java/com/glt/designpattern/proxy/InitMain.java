package com.glt.designpattern.proxy;

public class InitMain {

    public static void main(String[] args) {
        /**
         * 代理模式
         *      为一个对象提供一个替身或者占位符来控制对这个对象的访问
         *
         *
         *  远程代理
         *      管理客户和远程对象之间的交互
         *
         *  虚拟代理
         *      控制访问实例化开销大的对象
         *
         *  保护代理
         *      控制对对象方法的访问
         *
         *  动态代理
         *      运行时才创建类
         *
         *  防火墙代理--常用于公司防火墙
         *      控制网络资源的访问，保护主体免于“坏客户”的侵害
         *
         *  智能引用代理
         *      当主体被引用时，提供额外的动作，例如进行计算一个对象呗引用的次数
         *
         *  缓存代理--常用于web服务器代理（negix,apache等），及内容管理与出版系统（cms系统）等
         *      为开销大的运算结果提供暂时存储，它也允许多个客户共享结果，以减少计算或者网络延迟
         *
         *  同步代理
         *      在多线程情况下为主题提供安全的访问
         *
         *  写入时复制代理--java5的CopyOnWriteArrayList
         *      用来控制对象的复制，方法是延迟对象的复制，知道客户真的需要为止，是虚拟代理的变体
         *
         *  复杂隐藏代理
         *      用来隐藏一个类的复杂集合的复杂度，并进行访问控制，有时候也成为外观代理。
         *      复杂隐藏代理和外观模式是不一样的，因为代理控制访问，而外观模式只提供另一组接口
         */
    }
}
